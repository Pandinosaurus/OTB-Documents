** The Orfeo ToolBox Application mechanism                           :slides:
*** Data and Objectives
**** Objectives
     - Know how to set the environnement to use OTB application in Python
     - Know how to set application parameter in Python
     - Know how to use in memory connection of applications
     - Know how to use OTB/NumPy bridge.

**** Data
     Data can be found in folder ~Data/otb-python/~.

*** Outline
    This exercise consists in coding a Python script to perform surface water
    extraction on Sentinel-2 images over the area of /Laguna la nina/ in Peru.

    #+begin_center
    #+ATTR_LaTeX: width=0.95\textwidth center  
    [[file:Images/lluvias-peru.jpg]]
    #+end_center
    (Twitter pic from @hombredeltiempo)

*** Quick introduction to OTB applications
    - Orfeo ToolBox is a *library* offering remote sensing features
    - Often several features of OTB must be combined within a processing chain
    - Need for higher level interfaces (parameters, input and output data, logs ...)
    - Each application corresponds to a high level function (segmentation, orthorectification, raster calculator ...)
    - And corresponds to a C++ class (/otb::Application/) $\rightarrow$  library
    - Plugin mechanism
    - One can develop and distribute his/her own homemade applications

*** OTB applications in Python
    - Library called *otbApplication*
    - 2 main classes can be manipulated:
      - Registry: list available applications (or create some)
      - Application: base class for all applications (interact with an
        application
    - Example:
#+begin_src python
import otbApplication 
orth=otb.Registry.CreateApplication("OrthoRectification") 
#+end_src

*** Syntax 
    - Getters
#+begin_src python
app.GetParametersKeys()
#+end_src
    - Setters
#+begin_src python
app.SetParameterString("in", argv[1])
#+end_src
    - How to launch an application
      - Execute() -> wire the pipeline 
      - ExecuteAndWriteOutput() -> wire the pipeline and write output

*** Syntactic sugar
    - Instead of:
#+begin_src python
ExtractROI.SetParameterInt('startx', 140)
#+end_src

    - Use: 
#+begin_src python
ExtractROI.STARTX=140
#+end_src
    - Upper case is mandatory for now

*** In-memory connection
    - Applications are often use as parts of larger workflow
    - Heavy I/O operations generally in remote sensing image processing
    - Connect output parameter from app1 to the input parameter of app2
    - Available both in C++ API and Python
    - Related to ITK/OTB streaming mechanisms

*** NumPy bridge
    - Plug OTB into any image processing chain in Python
    - Use etImageFromNumpyArray() and SetImageFromNumpyArray() methods 
   
*** Useful links
    - [[https://www.orfeo-toolbox.org/CookBook/OTB-Applications.html][Introduction to OTB applications]]
    - [[https://www.orfeo-toolbox.org/CookBook/Applications.html][Application Reference Documentation]]
    - Application help: /otbcli\textunderscore{}XXX -help/
