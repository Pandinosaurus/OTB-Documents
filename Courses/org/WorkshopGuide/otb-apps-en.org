** The Orfeo ToolBox Application mechanism                           :slides:
*** Data and Objectives
**** Objectives
     - Know how to look for an application in the list of available applications
     - Know how to set application parameters
     - Know where the documentation of an application is
     - Know how to use several classical applications.

**** Data
     Data can be found in folder ~Data/stegano/~.

*** Outline
    This exercise consists in decoding 6 messages encoded within the
    images using steganography techniques, using OTB applications.

*** Quick introduction to OTB applications
    - Orfeo ToolBox is a *library* offering remote sensing features
    - Often several features of OTB must be combined within a processing chain
    - Need for higher level interfaces (parameters, input and output data, logs ...)
    - Each application corresponds to a high level function (segmentation, orthorectification, raster calculator ...)
    - And corresponds to a C++ class (/otb::Application/) $\rightarrow$  library
    - Plugin mechanism
    - One can develop and distribute his/her own homemade applications

*** Quick introduction to OTB applications
    - Command-line $\rightarrow$ otbcli\textunderscore{}Orthorectification
    - With graphical user interface $\rightarrow$ otbgui\textunderscore{}Orthorectification
    - Using python:
#+begin_src python
import otbApplication 
orth=otb.Registry.CreateApplication("OrthoRectification") 
#+end_src
    - Available from Qgis $\rightarrow$ /processing/ menu
    - Available in Monteverdi
*** GUI
    #+begin_center
    #+ATTR_LaTeX: width=0.95\textwidth center  
    [[file:../../../Slides/OTB-General/images/app_parameters.png]]
    #+end_center
*** Parameters
    - Display help from orthorectification app (good example)
    - /parameter groups/
    - /mandatory parameters/
    - Dynamic parameters dependency
    - Default value
    - Type of output images (default is float)
*** Another example: BandMath
    - Raster calculator
    - Uses the MuParser library
    - Input is a list of images (/-il/ parameter)
    - Mathematical expressions syntax:
      - imXbY:
        - X: index of image in list (from 1 to N)
        - Y: index of image band (from 1 to N)
      - [[http://muparser.beltoforion.de/mup_features.html][List of available operators]]
    - Examples:
      - -exp "(im1b4 - im1b1) / (im1b4 - im1b1))"
      - -exp "acos((123*im1b1+265*im1b2+652*im1b3) \\
               / (sqrt(123*123+265*265+652*652)\\
               *sqrt(im1b1*im1b1+im1b2*im1b2+im1b3*im1b3)))"
      - -exp "im1b1>0.5?255:0"
*** Useful links
    - [[https://www.orfeo-toolbox.org/CookBook/CookBookse1.html#x7-60001.1][Introduction to OTB applications]]
    - [[https://www.orfeo-toolbox.org//Applications/][Application Reference Documentation]]
    - [[https://www.orfeo-toolbox.org/CookBook/CookBookch3.html#x38-370003][Examples of use]]
    - [[http://docs.qgis.org/2.8/en/docs/user_manual/processing/index.html][QGIS processing]]
    - Application help: /otbcli\textunderscore{}XXX -help/
** The Orfeo ToolBox Application mechanism                            :guide:
*** Description                                                        :desc:
**** Summary

     During this exercise, we will learn how to use the Orfeo Toolbox
     applications. Images including messages encoded by steganography
     are available. You must use the OTB applications to reveal this
     hidden message for each image.

     All images used during this exercise are modified extracts from
     Pléiades images.

**** Prerequisites
     
     - Software installed (Monteverdi and Orfeo ToolBox)
     - Data downloaded

**** Objectives
     - Know how to look for an application in the list of available applications
     - Know how to set application parameters
     - Know where the documentation of an application is
     - Know how to use several classical applications.
     

*** Steps                                                             :steps:

    Data are located in the ~Data/stegano~ folder.

    For each message, one will first look at the image to try to
    detect the message, then try to use suggested applications to
    reveal the message.

**** Message 1    

     In ~image1.tif~ image, a sentence has been encoded in a high
     signal area, using a pixel value which is outside the possible
     range for Pléiades (reminder: Pléiades images are encoded with
     unsigned 12 bits integers).

     Use the *BandMath* application to detect those out of range
     values and thus reveal the message.

**** Message 2

     In ~image2.tif~ image, a sentence has been encoded within a
     homogeneous, low signal area. Modified pixels can not be seen
     with human eyes, but could be revealed by computing the image
     gradient, or some edge detection.
     
     Use the *EdgeExtraction* application to reveal the message.

**** Message 3

     In ~image3.tif~ image, a sentence has been encoded by slightly
     modifying the pixel values in the red and near infra-red
     bands. This modification can not be seen with human eyes, but
     could be revealed by computing an NDVI radiometric index.

     Use the *RadiometricIndices* application to reveal the message.

     You can also use the *BandMath* application to compute the NDVI
     index using the following formula:
     
     \begin{center}
     $NDVI = \frac{NIR-RED}{NIR+RED}$
     \end{center}

     Reminder: For Pléiades images the red band is the first one, and the NIR
     band is the last one.

**** Message 4

     In ~image4.tif~, a message has been hidden in the 2 least
     significant bits of the image. This modification can not be
     detected by human eyes, but could be revealed by isolating the
     values of those 2 bits.

     Use the *BandMath* application to isolate the 2 least significant
     bits in the image (encoded on 12 bits), to reveal the message.

     *Note:* The rint() function allows to round a floating point
     value to nearest integer in *BandMath* application.

**** Message 5

     In image ~image5.tif~, a message has been dissimulated by
     locally slightly modifying the image noise. It could be revealed
     by a transform that isolates noise.
     
     Use the *DimensionalityReduction* application to isolate the
     image noise and reveal the message.

     You can also try to figure out other techniques using the
     applications to highlight this local modification of the image noise.

**** Message 6

     In ~image6.tif~ image, a message has been hidden by locally
     using a gray-level morphological operation (opening with radius=1).
     It could be revealed by using the idempotent property of this
     transform. A function $f$ is said idempotent if:

     \begin{center}
     $f(f(x))=f(x)$
     \end{center}

     Use the *GrayscaleMorphologicalOperation* and *BandMath*
     applications to reveal the message by using this idempotent property.

*** Going further                                                   :further:

    What messages were you able to detect by analyzing the image with
    Monteverdi? What messages were impossible to detect?

    Can you imagine another process to encode hidden messages in
    images? An image (~image.tif~) and a message (~message.tif~) are
    provided in the ~Data/stegano/diy~ folder for you to try.

** The Orfeo ToolBox Application mechanism                        :solutions:
*** Message 1
    
    To reveal the first message, one can observe that a Pléiades image
    is encoded using 12 bits, and that there should not be any pixel
    value higher than $2^{12}-1=4095$. We will therefore use the
    *BandMath* application to threshold pixels higher than this value:
    
    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image1.tif           \
                      -out decoded1.tif uint8  \
                      -exp "im1b1>4095?255:0" 
    #+END_EXAMPLE

    The encoded text will appear in white on a black background.

*** Message 2

    To decode the second message we will compute the image gradient
    using the *EdgeExtraction* application:
    
    #+BEGIN_EXAMPLE
    $ otbcli_EdgeExtraction -in image2.tif    \
                            -filter gradient    \
                            -out decoded2.tif
    #+END_EXAMPLE

*** Message 3

    To decode the third message, one can compute a vegetation index
    such as the NDVI using the *RadiometricIndices* application:

    #+BEGIN_EXAMPLE
    $ otbcli_RadiometricIndices -in image3.tif      \
                                -channels.red 1       \
                                -channels.nir 4       \
                                -list Vegetation:NDVI \
                                -out decoded3.tif
    #+END_EXAMPLE

    One can also compute the NDVI using the *BandMath* application:
 
    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image3.tif                    \
                      -out decoded3.tif                 \
                      -exp "(im1b4-im1b1)/(im1b4+im1b1)"
    #+END_EXAMPLE

*** Message 4
 
    To reveal the 4th message, we are going to isolate the 2 least
    significant bits using the *BandMath* application:

    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image4.tif               \
                      -out decoded4.tif            \
                      -exp "im1b1-4*rint(im1b1/4)"
    #+END_EXAMPLE
    
    The $4*rint(im1b1/4)$ expression does not contain the 2 least
    significant bits, and the difference with original image thus
    reveals the message. 

*** Message 5

    To reveal this 5th message, we are going to do a principal
    component analysis using the *DimensionalityReduction*
    application, and extract the last band, where the image noise is
    condensed, using the *ExtractROI*
    application.

    #+BEGIN_EXAMPLE
    $ otbcli_DimensionalityReduction -in image5.tif  \
                                     -out pca6.tif   \
                                     -method pca
    $ otbcli_ExtractROI -in pca6.tif                 \
                        -out decoded6.tif            \
                        -cl Channel4
    #+END_EXAMPLE

*** Message 6
    
    To reveal the 6th message, we are going to use the idempotent
    property. If the message has been encoded using an idempotent
    transform, then $f(message)=message$, and therefore
    $f(message)-message=0$, while outside of the image we will see
    $f(image)$.

    #+BEGIN_EXAMPLE
    $ otbcli_GrayScaleMorphologicalOperation -in image6.tif             \
                                             -out ouverture6.tif        \
                                             -structype.ball.xradius 1  \
                                             -structype.ball.yradius 1  \
                                             -filter opening            
    $ otbcli_BandMath -il image6.tif ouverture6.tif                     \
                      -out decoded6.tif                                 \
                      -exp "(im2b1-im1b1)"
    #+END_EXAMPLE
