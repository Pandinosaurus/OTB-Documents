** OTB Applications on Python API                                    :slides:
*** Data and Objectives
**** Objectives
     - Know how to set the environment to use OTB application in Python
     - Know how to set application parameter in Python
     - Know how to use in memory connection of applications
     - Know how to use OTB/NumPy bridge.

**** Data
     Data can be found in folder ~Data/otb-python/~.

*** Outline
    This exercise consists in coding a Python script to perform surface water
    extraction on Sentinel-2 images over the area of /Laguna la nina/ in Peru.

    #+attr_LATEX: :float t :width \textwidth
    [[file:Images/lluvias-peru.jpg]]


    (Twitter pic from @hombredeltiempo)

*** Quick introduction to OTB applications
    - Orfeo ToolBox is a *library* offering remote sensing features
    - Often several features of OTB must be combined within a processing chain
    - Need for higher level interfaces (parameters, input and output data, logs ...)
    - Each application corresponds to a high level function (segmentation, orthorectification, raster calculator ...)
    - And corresponds to a C++ class (/otb::Application/) $\rightarrow$  library
    - Plugin mechanism
    - One can develop and distribute his/her own homemade applications

*** OTB applications in Python
    - Library called *otbApplication*
    - 2 main classes can be manipulated:
      - Registry: list available applications (or create some)
      - Application: base class for all applications (interact with an
        application
    - Example:
#+begin_src python
import otbApplication 
orth=otb.Registry.CreateApplication("OrthoRectification") 
#+end_src

*** Syntax 
    - Getters
#+begin_src python
app.GetParametersKeys()
#+end_src
    - Setters
#+begin_src python
app.SetParameterString("in", argv[1])
#+end_src
    - How to launch an application
      - Execute() -> wire the pipeline 
      - ExecuteAndWriteOutput() -> wire the pipeline and write output

*** Syntactic sugar
    - Instead of:
#+begin_src python
ExtractROI.SetParameterInt('startx', 140)
#+end_src

    - Use: 
#+begin_src python
ExtractROI.STARTX=140
#+end_src
    - Upper case is mandatory for now

*** In-memory connection
    - Applications are often use as parts of larger workflow
    - Heavy I/O operations generally in remote sensing image processing
    - Connect output parameter from app1 to the input parameter of app2
    - Available both in C++ API and Python
    - Related to ITK/OTB streaming mechanisms

*** NumPy bridge
    - Plug OTB into any image processing chain in Python
    - Use GetImageFromNumpyArray() and SetImageFromNumpyArray() methods 
   
*** Useful links
    - [[https://www.orfeo-toolbox.org/CookBook/OTB-Applications.html][Introduction to OTB applications]]
    - [[https://www.orfeo-toolbox.org/CookBook/Applications.html][Application Reference Documentation]]
    - Application help: /otbcli\textunderscore{}XXX -help/
*** Introduction : Water monitoring in the Laguna de la Nina(Peru) event
    - A time series of 3 images (SENTINEL 2) show the water extent variation:

     #+ATTR_LATEX: :float t :width 1\textwidth
     [[file:Images/app-python-0.png]] 

*** Sentinel 2 - Level 2A Format

|----------------+------------+------------+------------+-----------------------|
| Band name      | S2 band id | Wavelength | Resolution | Used in this exercise |
|----------------+------------+------------+------------+-----------------------|
| Blue           | B2         | 490 nm     | 10 m       | -                     |
| Green          | B3         | 560 nm     | 10 m       | -                     |
| Red            | B4         | 665 nm     | 10 m       | Yes                   |
| NIR - Narrow 1 | B5         | 705 nm     | 20 m       | -                     | 
| NIR - Narrow 2 | B6         | 740 nm     | 20 m       | -                     | 
| NIR - Narrow 3 | B7         | 783 nm     | 20 m       | -                     |   
| NIR - Wide     | B8         | 842 nm     | 10 m       | -                     |
| NIR - Narrow 4 | B8A        | 865 nm     | 20 m       | Yes                   |  
| SWIR 1         | B11        | 1610 nm    | 20 m       | -                     |
| SWIR 2         | B12        | 2190 nm    | 20 m       | -                     |  
|----------------+------------+------------+------------+-----------------------|

*** Simple OTB application in Python : exercise1.py

      #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-1.png]]    

*** Chain OTB applications : exercise2.py

     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-2.png]]


*** Chain OTB applications in-memory: exercise3.py

     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-3.png]]
 

*** NoData management: exercise4.py

     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-4.png]]
     
*** Water detection chain with NoData management: exercise4.py

     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-5.png]]

*** Using a reference: Global Surface Water 
     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-6.png]]

*** Comparison with a reference: exercise5.py
     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-7.png]]

** OTB Applications on Python API                                      :guide:
*** Description                                                        :desc:
**** Summary
     
     The following exercise is an introduction to the Python API for ORFEO ToolBox applications.

     This exercise will show to chain OTB applications using an optical
     dataset for an hydrological goal : water surfaces analysis

**** Prerequisites

     - Installed Monteverdi and Orfeo ToolBox software
     - Installed Python (2.7.X or 3.5.X), with NumPy dependencies and the right 
       environmental variables setup (help: source the otbenv.profile in Linux or launch otbenv.bat
       in Windows). 
       *Test*: launch "import otbApplication" on the Python command line to check this point 
     - Downloaded dataset (~Data/app-python~) 
     - Understanding of Orfeo Toolbox applications (see relevant exercises) 

**** Goals

     - Create, configure and launch OTB Applications from Python scripts
     - Use of in-memory connection between OTB Applications
     - Process Sentinel2-Level 2A as input dataset (optical satellite images)
     - Show a simple method for water detection based on NDVI
     - Evaluate the resulting water map with a reference layer

*** Steps                                                             :steps:

    Data are located in ~Data/app-python~ folder, with the following sub-folders: 
     - ~images~ contains a set of Sentinel 2 images (Level 2A) in Laguna de la 
       Nina, Peru
     - ~ref~ contains ancillary testing data (occurrence water masks) in
       raster format
    This folder also contains the following Python scripts:
    ~exercise1.py~ ... ~exercise5.py~

**** Introduction : Water monitoring in the Laguna de la Nina(Peru) event 

     The region of interest for this exercise is Laguna de la Nina, Peru  
     (-5.8101 lat, -80.7155 lon). In 2017 water surface extents
     have drastically changed due to heavy rains during "El nino" periods.
     The final objective is to analyze this change by means of satellite image
     processing. 

     In this exercise we will use three Sentinel-2 Level2A images 
     (folder ~app-python/images~) at the following dates: 

|--------------|
|  2016-12-18  |
|  2017-04-07  |
|  2017-12-03  |
|--------------|

     1. Open in Monteverdi the composite_*.vrt file (RGB composition) of each 
        of the dates. What do you observe in these images?  
        How does the water extent change? 

     *Note*: The VRT compositions have been created with the tool ~gdalbuildvrt~
     for this exercise. They are not included by default in Sentinel-2 products.

**** Sentinel 2 - Level 2A Format

     One of the goals of this exercise is to process this product as downloaded 
     from the product provider ([[https://theia.cnes.fr][Theia server]]). Level 2A is an 
     orthorectified product in ground reflectance, constructed from L1C 
     products (orthorectified product in Top of Atmosphere).

     Each Sentinel2-Level 2A product contains several *files*, which are classified as: 
         - SRE: (SRE for Surface REflectance) corrected for atmospheric effects,
           including adjacency effects
         - FRE: (FRE for Flat REflectance) are also corrected for slope effect,
           which consists in suppressing the apparent reflectance
           variations. The corrected images look like if the land was flat.  
         - MTD: Metadata
         - QKL: quicklook file (low resolution image to show an RGB overview )
         - ATB: atmospheric and biophysical parameters with 2 bands :
                - 1st band: water vapor content (WVC) coded over 8 bits
                - 2st band: aerosol optical thickness (AOT) coded over 8 bits
         - CLM: cloud mask computed by MAJA software, made of 1 band coded over 8 useful bits.
         - SAT: saturation mask coded over 8 bits
         
     In this exercise, water maps will be calculated from ground reflectance 
     files SRE or FRE.

     The SRE and FRE files consist of 13 files, one per spectral channel in
     GeoTiff format (.tif). Each band image may have a different resolution (10m
     or 20m).

|----------------+------------+------------+------------+-----------------------|
| Band name      | S2 band id | Wavelength | Resolution | Used in this exercise |
|----------------+------------+------------+------------+-----------------------|
| Blue           | B2         | 490 nm     | 10 m       | -                     |
| Green          | B3         | 560 nm     | 10 m       | -                     |
| Red            | B4         | 665 nm     | 10 m       | Yes                   |
| NIR - Narrow 1 | B5         | 705 nm     | 20 m       | -                     | 
| NIR - Narrow 2 | B6         | 740 nm     | 20 m       | -                     | 
| NIR - Narrow 3 | B7         | 783 nm     | 20 m       | -                     |   
| NIR - Wide     | B8         | 842 nm     | 10 m       | -                     |
| NIR - Narrow 4 | B8A        | 865 nm     | 20 m       | Yes                   |  
| SWIR 1         | B11        | 1610 nm    | 20 m       | -                     |
| SWIR 2         | B12        | 2190 nm    | 20 m       | -                     |  
|----------------+------------+------------+------------+-----------------------|

     For this exercise, only some bands will be used to obtain water extents maps: 
     Red (B4) and NIR - Narrow4 (B8A). Also, the Cloud Mask will be used. 

     *Note:* To reduce the dataset size, we have deleted all the bands not used and 
     replaced them with an empty file with the same name. 
    
     Let's play: 

     1. Since we are interested in ground reflectance images to calculate water 
        surfaces, what band kind of file would you use : SRE or FRE? 

     2. Look at the disk size of B3 and B11 files of one the datasets in 
        ~app-python/images/SENTINEL2A_*/~ Do all files have the same disk
        size? Why?

     3. On the command line, launch the ~gdalinfo~ command on different band 
        files to check the pixel size, the number of pixels and the minimum 
        and maximum values. Do we have common minimum values between 
        different bands? Why?
     
        *Note:* Make sure that OTB binary files ($otb-path/bin) is included 
        in your PATH environment variable.
 
     4. Look at /MASKS sub-folder : there is a CLM file that contains a cloud
        mask. Do you think that this information might be interesting to 
        make better water detections? How? 

     5. Open in Monteverdi the B8A and B4 and check the values in a water surface.
        Which band has higher reflectance values on water surfaces? (Use the 20170407 date
        to have wider water surfaces)

**** Simple OTB application in Python : exercise1.py
    
     Take a look to the script: ~app-python/exercise1.py~. The aim of 
     this script is to launch the Superimpose application from OTB to resample 
     the B8A band (20m pixel size) to a new resolution. 
  
     At the beginning, there is an otbApplication import. In the otbApplication
     module, two main classes can be manipulated:

        - /Registry/, which provides access to the list of available applications, 
          and can create applications.
        - /Application/, the base class for all applications. This allows to 
          interact with an application instance created by the Registry

     1. In order to show the available applications, launch ~exercise1.py~ with 
        the command  : 
        #+BEGIN_EXAMPLE
        $ python exercise1.py
        #+END_EXAMPLE
        At the output you will see the list
        of available applications. Which line in the script allowed to show the 
        list of applications? This method is present in the Registry or in an Application
        module?

     On the second part of the script, we want to launch the Superimpose application
     to do the resampling of the B8A image (20m pixel size) using the image
     B4 (10m pixel size) as a reference.

     The script ~exercise1.py~ launches the Superimpose OTB application 
     as presented in the following scheme:

     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-1.png]]
      
     *Note:* Superimpose may be configured to used different interpolations 
     (linear, bi-cubic or nearest neighbor)

     The necessary inputs and outputs of the [[https://www.orfeo-toolbox.org/CookBook/Applications/app_Superimpose.html][Superimpose application]] are
     described in the following table:

|---------------+------------------------+----------------|
| Parameter Key | Parameter Name         | Parameter Type |
|---------------+------------------------+----------------|
| inr           | Reference Input        | input image    | 
| inm           | Image to re-project    | input image    | 
| out           | Output image           | output image   | 
     
     2. Open ~exercise1.py~ and complete the "FILL THE GAP 1". 
        You need to complete the path of ~app-python/images~ of your system.
     3. Open ~exercise1.py~ and complete the "FILL THE GAP 2".
        You need to initialize the Superimpose OTB application.
     4. Open ~exercise1.py~ and complete the "FILL THE GAP 3" to set ~inr~
        ,~inm~ and ~out~ parameters of the Superimpose application. 
     5. Launch ~exercise1.py~ the script with the command 
        python exercise1.py. How does the output file ~B8A_10m.tif~ look like?       
         
         
**** Chain OTB applications : exercise2.py

     In this part, the aim is to calculate an NDVI image and obtain a water mask by means
     of thresholding the NDVI value. We will launch different OTB applications
     in the same script to obtain the desired result.

     The script ~exercise2.py~ chains OTB applications as presented in the following scheme:
      #+ATTR_LATEX: :float t :width 1\textwidth
     [[file:Images/app-python-2.png]]

     Use the Superimpose and Bandmath applications to calculate the NDVI and
     the water map image 
     using Red band (B4) and NIR band (B8A) from the S2 product:
     1. Open ~exercise2.py~ and complete the "FILL THE GAP 1".
        You need to complete the path of ~app-python/images~ of your system.
     2. Open ~exercise2.py~ and complete the "FILL THE GAP" 2 and 3.
        You need to :
            - configure the application2 "BandMath" parameters:  ~il,out,exp~
            - configure the application3 "BandMath" parameters:  ~il,out,exp~
        *Note:* Take a look to lines 23-30 to understand the filepath of each band image.
        Check also the online help of the applications if necessary.

     3. Launch ~exercise2.py~ script with the command: 
        #+BEGIN_EXAMPLE
        $ python exercise2.py
        #+END_EXAMPLE
        What are the resulting files? Check the results in Monteverdi.

**** Chain OTB applications in-memory: exercise3.py
     This exercise is equivalent to exercise2.py, but avoiding to write on intermediate
     files. The goal is to process the intermediary results using only RAM memory. 

     As a second improvement, the NDVI calculation is left to 
     the last step: NDVI and water mask are calculated at the same time.  
     In OTB terms, we perform just one BandMath calculation (instead of two).
     
     The script ~exercise3.py~ chains OTB applications as presented in the following scheme:
      #+ATTR_LATEX: :float t :width 1\textwidth
     [[file:Images/app-python-3.png]]

     In-memory connection: the output of app1 might be declared as input of
     app2 using an expression as: 
        - app2.SetParameterInputImage("in",app1.GetParameterOutputImage("out"))
          if the input of application2 is an Image(like in the Superimpose application)
        - app2.AddImageToParameterInputImageList("il",app1.GetParameterOutputImage("out"))
          if the input of application2 is an ImageList(like the BandMath application)
     
     Let's optimize our water mask calculator:
     1. Open ~exercise3.py~ and complete the "FILL THE GAP 1".
        You need to complete the path of ~app-python/data~ of your system.
     2. Open ~exercise3.py~ and complete the "FILL THE GAP 2" to declare the output 
        of application1 as input of application2.
     3. Open ~exercise3.py~ and complete the "FILL THE GAP 3" to set the BandMath expression
        that sets value 1 if ndvi value<0 and 0 if ndvi value>1
     4. Launch ~exercise3.py~ with the command: 
        #+BEGIN_EXAMPLE
        python exercise3.py
        #+END_EXAMPLE
        As you see in the code, the ApplicationX.ExecuteAndWriteOutput()
        has been changed to ApplicationX.Execute()
        in ~exercise3.py~. How does it affect the execution sequence?
     5. In Application1, the output parameter has been declared with a filename.
        Has it been written as a file after the execution? Why?
     6. At the generation of the NDVI mask(with two possible values: water(1) and land(0) 
        ), there is a line like : 
         appX.SetParameterOutputImagePixelType("out", otbApplication.ImagePixelType_ uint8)
         What is the purpose of this line? What would have happened without it?
        


**** Water detection chain with NoData management: exercise4.py

     There are some parts of the images that are covered by clouds. In this 
     exercise, we will use the CLD band in the S2 product to set NODATA regions.
     
     If a CLD pixel value is different of zero, that means that a cloud 
     has been detected in the pixel. The aim of this exercise is to use an special 
     value (255) in the final mask when clouds are present. 
     #+ATTR_LATEX: :float t :width 0.8\textwidth
     [[file:Images/app-python-4.png]]

     The script ~exercise4.py~ chains OTB applications as presented in the following scheme:
     #+ATTR_LATEX: :float t :width 1\textwidth
     [[file:Images/app-python-5.png]]

     At the end of the chain, an OTB application "ManageNoData" is used to set the NODATA value
     as 255 in the GeoTiff metadata.
     
     Let's do it:
     1. Open ~exercise4.py~ and complete the "FILL THE GAP 1".
        You need to complete the path of ~app-python/data~ of your system.
     2. Open ~exercise4.py~ and complete the "FILL THE GAP 2" to set the BandMath expression
        to set the 255 value where the clouds image is different to zero, and otherwise
        keep the NDVI mask image.
     3. Launch ~exercise4.py~ with the different dates as arguments:

            ~python exercise4.py SENTINEL2A_20161218-153729-222_L2A_T17MNP_D_V1-4~

            ~python exercise4.py SENTINEL2A_20170407-154054-255_L2A_T17MNP_D_V1-4~

            ~python exercise4.py SENTINEL2A_20171203-154308-349_L2A_T17MNP_D_V1-4~

        and you will obtain three different masks. Open them with monteverdi to check
        the water extent variations.
     4. Look at the 20161218 final water mask. What are the lines detected as water? 
         

**** Comparison with a reference : exercise5.py  
 
     The water masks obtained after February 2017 correspond to an special flood event 
     in the Laguna de la Nina. How often do we observe floods in this region? Let's try to 
     answer it. 
     
     The Global Surface Water(GSW) map, a water extent map based on optical images (Landsat satellite) over the
     last 30 years, can be helpful to understand how frequently water is detected in a given area. This product
     contains an occurrence layer that provides the ratio between "water found"
     occurrences and the number of valid observations in the
     last 30 years for each pixel. Hence, a pixel with occurrence value equal to 10 means 
     that water has been detected in 10% of valid observations.
     

     #+ATTR_LATEX: :float t :width 0.7\textwidth
     [[file:Images/app-python-6.png]]

     #+ATTR_LATEX: :float t :width 0.7\textwidth
     [[file:Images/app-python-7.png]]
     
     The Global Surface Water data are available for download in tiles 10°x10°
     on [[https://global-surface-water.appspot.com/download][Global Surface Water AppSpot website]].
 
     You will find the required dataset already downloaded in the folder: ~app-python/ref~

     For this exercise, we are going to compare the 3 water masks (20161218,
     20170407 and 20171203) produced in exercise 4 with the GSW product. 

     The method to follow for this exercise is:
         - Crop and resample the GSW occurrence layer(30m resolution) to match 
           with the water mask grid (10m resolution).
         - Apply a threshold on the GSW resampled product with different probabilities:
           10%, 20%, 30%, 50%, 75%, 95% to obtain different reference images
         - Compare the water extent masks of exercise 4 with each of the reference
           images issued from GSW. This comparison will help us to understand how often do
           we observe a water extent map along time.
     #+ATTR_LATEX: :float t :width 0.7\textwidth
     [[file:Images/app-python-8.png]]

    
     Steps:
        1. Open the image ~ref/occurrence_90W_0N.tif~ in QGIS or Monteverdi.

           *WARNING*: Select "ignore" in the pop-up message for the overviews generation.

           What values do you observe around the coordinates lon: -80.6767, lat: -5.91. 
           Do you observe any zone with 90-100 occurrence?  What does it means: 
           permanent or rare waters?

        2. Our zone of study is just a portion of the ~ref/occurrence_90W_0N.tif~. The ~exercise5.py~ script
           will launch Superimpose and Bandmath OTB applications to obtain the GSW layer cropped, resampled 
           and thresholded at given value. To obtain the reference mask launch:

           #+BEGIN_EXAMPLE
               python exercise5.py 10
               python exercise5.py 20	
               python exercise5.py 30
               python exercise5.py 50
               python exercise5.py 75
               python exercise5.py 90
           #+END_EXAMPLE

        3. Now it's time to compare each of the water masks of exercise 4 (on 3 dates: 20161218,
           20170407 and 20171203) with each of the reference images.
           Check the following list of applications in the [[https://www.orfeo-toolbox.org/CookBook/Applications.html][OTB Applications reference documentation]], 
           and look the Learning section. Which application do you think that might be helpful to compare 
           two raster maps?  
           Use this application to calculate the reference mask that yields the best likelihood (Kappa index)
           for each of the 3 water masks.You may launch the otb application in the commandline: 
               otbcli-XXXXX -in XXXX -out XXXX -param1 XXXX          
        4. What would you conclude about the results? 
** OTB Applications on Python API                                 :solutions:
*** Introduction : Water monitoring in the Laguna de la Nina(Peru) event 
    1. The color composition of each image of level 2 allows to see the regions as 
       seen by the naked eye and seen as we did not have any atmosphere. 
       The images show how this region evolves over three phases: 
        - empty lagoon on December 2016
        - max extension of the flooded lagoon in April 2017
        - flooded lagoon decreasing in December 2017. 


*** Sentinel 2 - Level 2A Format

    1. FRE images have been corrected for the effect of slopes (which affects illumination)
       , and hence, the physical properties of the observed surfaces are better described. 

    2. B3 and B11 have different resolutions. Higher resolution (smaller pixel size) for the same area
       involves a higher number of pixels to be described in the file, and hence, a bigger file size. 

    3. Each band is independent from the others.
 
    4. An zone covered with clouds does not present any information about the ground.
       It is better to ignore the clouded areas by tagging them as NODATA regions, in order to 
       avoid false detections of water.

    5. On water regions, B4(RED) has higher reflectance values than B8A(NIR). This relation between 
       bands is used on the NDVI calculations to detect water pixels.


*** Simple OTB application in Python : exercise1.py
    
    1. The line is ~print(str(otbApplication.Registry.GetAvailableApplications()))~
       , that uses a method defined in the ~Registry~ module of the OTB Python library.

    2. ---

    3. ~Superimpose = otbApplication.Registry.CreateApplication("Superimpose")~

    4. The new generated Near Infrared image has a finer resolution (pixel size = 10m) 
       than the original image (pixel size = 20m). The new finer pixel values 
       have been interpolated. You can use Monteverdi to zoom closer and compare the generated 
        ~B8A_10m.tif~ and the original B8A image. You shall appreciate the smoothed interpolated
       values in the new image.
         
*** Chain OTB applications : exercise2.py

    1. ---

    2. Gaps to fill:
       - Gap 2 : 
         #+BEGIN_EXAMPLE
         application1.SetParameterString("inr",str( d["input_path"]  \
                                         + d["B4_image"]))
         application1.SetParameterString("inm",str( d["input_path"]  \
                                         + d["B8A_image"]))
         application1.SetParameterString("out", "B8A_10.tif")
         #+END_EXAMPLE
       - Gap 3 : 
         #+BEGIN_EXAMPLE
         application2.SetParameterStringList("il",["B8A_10.tif", \
                                  str(d["input_path"] + d["B4_image"])])  
         application2.SetParameterString("out", "ndvi.tif")    
         application2.SetParameterString("exp", "(im1b1-im2b1)/(im1b1+im2b1)")
         #+END_EXAMPLE
       - Gap 4 : 
         #+BEGIN_EXAMPLE
         application3.SetParameterStringList("il",["ndvi.tif"])
         application3.SetParameterString("out", "water_mask.tif")
         application3.SetParameterString("exp", "im1b1<0?1:0")
         #+END_EXAMPLE
    3. *ndvi.tif*: intermediary Geotif file that contains the Normalized
       Vegetation Index of the scene.

       *water-mask.tif*: binary mask (Geotif file) that contains the value 1 for those pixels
       with a value of NDVI under a given threshold, that is considered as Water Pixels. The rest of the
       pixels are considered as Land (pixel value = 0).
       Note: In Monteverdi, check the High/low values of the Dynamic Range to be 0 and 1. 
       Also, deactivate the display of  NODATA values.

*** Chain OTB applications in-memory: exercise3.py
     
    1. ---
    2. The gap is filled as follows:
       #+BEGIN_EXAMPLE
       application2.AddImageToParameterInputImageList("il", \
                   application1.GetParameterOutputImage("out"))
       #+END_EXAMPLE
    3. The gap is filled as follows:
       #+BEGIN_EXAMPLE
       application2.SetParameterString("exp", "(im1b1-im2b1)/(im1b1+im2b1)<0?1:0")
       #+END_EXAMPLE
    4. The lines with ~ApplicationX.Execute()~ will not launch immediately the ApplicationX. This line 
       just describes that the ApplicationX will be launched in a pipeline sequence. 
       When another ~ApplicationY.ExecuteAndWriteOutput()~ is further applied
       in the same pipeline, where the inputs of ApplicationY are dependent of the
       outputs of ApplicationX, then the ApplicationY will trigger the Execution of ApplicationX.

    5. When ~ApplicationX.Execute()~ is used in the code, the 
       results of ApplicationX are only used in RAM memory
       to resolve the dependence between the inputs/ouputs of different applications of the pipeline. Thus,
       the output file (~B8A_10m.tif~) is never written as file but it is used in the Application2 as input.

    6. In order to reduce the size of the output image without degrading the image, we may
       use a simpler type of variable to store the values. Instead of using a Float type (which
       needs 2 or 4 bytes) we can use an Integer type(uint8= unsigned integer with 8 bits) 
       which needs 1 byte per pixel. "uint8" type allows to use 256 different values,
       which is alright for the 2 values needed (0=land,1=water).

       We may go further using the Extended filenames mechanism on the output file definition:
       #+BEGIN_EXAMPLE
       appX.SetParameterOutputImagePixelType("out", \
               "water_mask.tif?&gdal:co:NBITS=1")
       #+END_EXAMPLE
       This solution will use just 1 bit per pixel. For a better understanding,
       see module "Internals".

*** Water detection chain with NoData management: exercise4.py

    1. ---

    2. The gap is filled as follows:
       #+BEGIN_EXAMPLE
       app3.SetParameterString("exp", "im2b1!=0?255:im1b1")
       #+END_EXAMPLE

    3. ---

    4. The straight lines are roads, which have similar spectral responses compared to water
       in the RED and NIR bands.
         

*** Comparison with a reference: exercise5.py 
 
    1. In the GSW product, the value = 90 means that water has been found 
       in the 90% of the observations during the 32 years
       period. It corresponds to permanent waters.

    2. ---

    3. The ComputeConfusionMatrix application can be used to compare raster images as follows: 

       #+BEGIN_EXAMPLE
       $ otbcli_ComputeConfusionMatrix -in water_mask_SENTINEL2A_20170407-154054-255_L2A_T17MNP_D_V1-4.tif \
         -nodatalabel 255 \
         -ref raster \
         -ref.raster.in GSW_10.tif \
         -out conf_20170407_10.csv
       #+END_EXAMPLE

       The best kappa results for each date are:

       20161218  >> GSW_75 (kappa = 0.8175)

       20170407  >> GSW_10 (kappa = 0.7867) 

       20171203  >> GSW_20 (kappa = 0.5677)

    4. The water surface contained in the 20161218 image (the driest one) is seen at least 
       75% of the times (during the 32 years of Landsat observations).
       The second image have a water extent that has been seen only 10% of the times 
       and the third one only the 20% of the times. 
       We may conclude that the second and third water extents are rare events 
       given the low occurrence rate. 
