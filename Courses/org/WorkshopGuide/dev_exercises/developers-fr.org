** Tutoriel pour futur développeur OTB                               :slides:
*** Objectifs et données
**** Objectifs
     - Savoir compiler un programme en C++ utilisant OTB et CMake
     - Savoir créer une chaîne de traitement avec l'API C++ de l'OTB:
       - Lecture de l'image à partir d'un fichier en entrée
       - Traitement de l'image (calcul de gradient)
       - Écriture de l'image de gradient dans un fichier en sortie
     - Savoir coder son propre traitement (par pixel) dans un filtre OTB
     - Savoir créer une application OTB qui embarque sa chaîne de traitement
     - Savoir packager son application dans un module externe OTB  

**** Données
     
     Les sources des exercices se trouvent dans le répertoire ~Data/otb_developers/~.

*** Déroulement
    
    - 5 exercices successifs avec sources séparées (cmake et c++)
      
    - Chaque exercice compile, mais le code est à trou, à compléter
    
    - Les parties du code à compléter sont localisés par le commentaire  ~//TODO:~ dans les fichiers sources.

*** Exercice 1: Hello World 
**** Les bases
     - C++ Generic Programming
     - STL  Standard Template Library
     - Abstraction des types et des conteneurs
     - ~std::vector< T >~: ~std::vector< int >~ , ~std::vector< double >~
     - Image OTB: ~otb::Image< PixelType , Dimension >~
**** SmartPointer
     - Mécanisme interne ITK pour gestion de la mémoire (tas) 
     - Reference counting
     - Déclaration: ~FilterType::Pointer  filter = FilterType::New();~
     - *PAS BESOIN DE FAIRE:* ~filter->Delete()~ ou ~delete filter~
*** Exercice 2: Pipeline OTB
    - Idée: enchainer des filtres en utilisant l'API OTB
    - On utilise toujours les memes méthodes (génériques)
    - Déclaration: opérateur ~New()~
    - Chaînage des filtres: ~filter2->SetInput(filter1->GetOutput())~
    - Déclenchement du pipeline: méthode ~Update()~
*** Exercice 3: Écrire un filtre OTB
**** Type de filtre
     - Hiérarchie de classes (ITK): Object -> DataObject -> ImageBase -> Image
     - Filtres: Object -> ProcessObject -> ImageSource -> ImageToImageFilter
     - ImageToImageFilter -> InPlaceImageFilter -> UnaryFunctorImageFilter
**** Foncteur
     - Toute classe surchargeant operator() est qualifiée de classe foncteur
     - Dans le monde OTB/ITK
     - Opération appliquée pixel par pixel
     - Implémenter un foncteur qui divise par 2 tous les pixels
     - (le filtre qui intègre le foncteur est déjà implémenter)
*** Exercice 4: Écrire une application OTB
**** Objectifs
     - Package chaîne de traitement en ligne de commande via une API standard
       (gestion des paramètres, documentation...)
     - Interface GUI, Python...
     - Possibilité d'intégration dans Monteverdi
     - Possibilité de chaîner son application avec des apps existantes
**** Par où commencer?
     - Partir d'une application existante
     - Hérite de la classe Application
     - Implémenter les méthodes:
     - Filtres membres de l'application
*** Exercice 5: Écrire un module externe OTB
**** Objectifs
     - Partager ces fonctionnalités
     - Tester le code sur le dashboard OTB (TDD)
     - Contribuer du code à l'OTB
**** Par où commencer?
     - OTB module template: https://github.com/orfeotoolbox/otbExternalModuleTemplate
     - CMake magic
** Tutoriel pour futur développeur OTB                                :guide:
*** Description                                                        :desc:
**** Résumé
     
     Au cours de ces exercices, nous allons apprendre à développer en
     utilisant l'API en C++ de la librairie Orfeo ToolBox. Après avoir
     configuré et compilé un programme informatique simple "Hello
     World" dont le but est de faire la démonstration rapide de la
     configuration et de l'utilisation de l'OTB, nous allons apprendre
     les mécanismes permettant de chaîner des traitements (filtres
     dans le langage OTB), de lire une image, d'effectuer un
     traitement sur l'image et d'écrire le résultat dans un nouveau
     fichier. Ensuite nous apprendrons à créer notre propre brique de
     traitement et nous verrons enfin comment la packager dans une
     application OTB et enfin un module externe.
 
**** Pré-requis
     - SDK OTB
     - Environnement de développement (CMake, compilateur, éditeur)
     - Données téléchargées
**** Objectifs

     - Savoir configurer et compiler un programme en C++ qui utilise
       la librairie OTB avec l'outil CMake
     - Savoir créer un programme C++ câblant plusieurs étapes d'une
       chaine de traitements d'images en utilisant l'API C++ de
       l'OTB. Les étapes à enchaîner:
       - Lecture de l'image à partir d'un fichier en entrée
       - Traitement de l'image (calcul de gradient)
       - Écriture de l'image de gradient dans un fichier en sortie
     - Savoir coder son propre traitement unitaire dans un filtre OTB
     - Savoir créer une application OTB qui embarque sa chaîne de
       traitements
     - Savoir packager son traitement et son application /custom/ dans
       un module externe OTB
       
*** Étapes                                                            :steps:
    
    Les exercices de ce TP sont fortement inspirés du cours ITK ci-dessous :

    http://www.na-mic.org/svn/NAMICSandBox/trunk/ITKAdvancedCourse/


    Les données se trouvent dans le répertoire ~Data/otb_developers~.

    Chacun des exercices suivants se présente sous la forme d'un
    projet CMake contenant le code source de l'exercice. Ce code
    source est à trous, c'est à dire qu'il contient un certain nombre
    d'instructions manquantes identifiées dans le code par des
    commentaires ~TODO~. A noter que tous les exercices compilent sans
    erreurs même avec ces instructions manquantes.
    
    Pour chaque exercice, il s'agit:
    - D'implémenter les fonctionnalités listées
    - Vérifier que le code compile
    - Vérifier que le programme implémente la fonctionnalité attendue

    Pour compiler un exercice, on procède de la manière suivante:

    Sous Windows:
    
    #+BEGIN_EXAMPLE
    $ cd OTB-5.10.1-xdk-Linux64
    $ . ./otbenv.profile
    $ cd ..
    $ mkdir build_ex1
    $ cd build_ex1
    $ cmake $DATA/dev_exercises/Exercises/ex1_HelloWorld/ -G"NMake Makefiles"
    $ nmake
    $ ./HelloWorld.exe 
    OTB Hello World !
    #+END_EXAMPLE

    Sous Linux:

    #+BEGIN_EXAMPLE
    $ cd OTB-5.10.1-xdk-Linux64
    $ . ./otbenv.profile
    $ cd ..
    $ mkdir build_ex1
    $ cd build_ex1
    $ cmake $DATA/dev_exercises/Exercises/ex1_HelloWorld/
    $ make
    $ ./HelloWorld 
    OTB Hello World !
    #+END_EXAMPLE


    Sous Mac OS X:

    #+BEGIN_EXAMPLE
    $ cd OTB-5.10.1-xdk-Linux64
    $ . ./otbenv.profile
    $ cd ..
    $ mkdir build_ex1
    $ cd build_ex1
    $ cmake $DATA/dev_exercises/Exercises/ex1_HelloWorld/ -DCMAKE_CXX_FLAGS='-std=c++11'
    $ make
    $ ./HelloWorld 
    OTB Hello World !
    #+END_EXAMPLE
    
**** Exercice 1: Hello World 
     Il s'agit de modifier le programme ~HelloWorld.cxx~ pour:
     - Déclarer un alias à l'aide du mot clé ~typedef~ pour le type ~Image~ de
       dimension 2 pour des pixels de type entier non signé (~unsigned int~).
     - Créer un objet image avec ce type

     *Documentation utile:* section 5.1.1 du Software Guide.

**** Exercice 2: Pipeline OTB
     Il s'agit de modifier le programme ~Pipeline.cxx~ pour:
     - Modifier le programme pour effectuer le calcul de la norme du gradient de l'image en
       entrée et écrire le résultat dans une autre image en sortie

    *Documentation utile:* section 4.3 du Software Guide

**** Exercice 3: Écrire un filtre OTB
     Il s'agit de modifier le programme ~DividerByTwoImageFilter.h~ pour:
     - Implémenter le foncteur permettant de réaliser la division par 2 de tous
       les pixels de l'image 
     - Valider l'implémentation à partir de l'exécutable en utilisant une des images utilisées pendant la formation
     
     Modifier ensuite le fichier ~DividerImageFilter.h~ pour implémenter un
     foncteur réalisant la division de chaque pixel par un diviseur passé en
     paramètre du filtre

     *Documentation utile:* http://www.na-mic.org/svn/NAMICSandBox/trunk/ITKAdvancedCourse/doc/presentations/Insight-Writing-a-New-Filter.ppt , planches 11 à 16
**** Exercice 4: Écrire une application OTB
     Il s'agit de modifier le programme ~MyApp.cxx~ pour:
     - Déclarer un nouveau paramètre de type ~float~ permettant de modifier la valeur
     - Modifier la méthode DoExecute pour que l'application réalise la division de tous les pixels
       de l'image par la valeur passée en paramètre de l'application
       
     *Documentation utile:* Chapitre 30 du Software Guide
**** Exercice 5: Écrire un module externe OTB
     Il s'agit de modifier le modèle de remote module fournit pour:
     - Modifier les fichiers CMake pour changer le nom du remote module
     - Insérer les fichiers sources correspondant au filtre ~DividerImageFilter.h~
       développés dans l'exercice 3
     - Insérer l'application développée à l'exercice dans le répertoire ~app~
     - Ajouter un test de non régression de l'application développée
       
     *Documentation utile:* Chapitre 31 du Software Guide

*** Pour aller plus loin                                            :further:
    - OTB Software Guide :: https://www.orfeo-toolbox.org/SoftwareGuide/
    - OTB module template :: https://github.com/orfeotoolbox/otbExternalModuleTemplate
    - ITK Software Guide :: http://www.itk.org/ItkSoftwareGuide.pdf
    - ITK CourseWare :: https://itk.org/Wiki/ITK/Course_Ware

** Tutoriel pour futur développeur OTB                            :solutions:

Les solutions de tous les exercices sont fournis aux élèves sous la forme d'une
archive contenant les corrigés de tous les fichiers sources.
