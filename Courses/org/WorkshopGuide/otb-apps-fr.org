** Le mécanisme des applications Orfeo ToolBox                       :slides:
*** Objectifs et données
**** Objectifs
     - Savoir rechercher une application dans la liste des
       applications disponibles
     - Savoir paramétrer une application
     - Savoir trouver la documentation d'une application
     - Savoir utiliser plusieurs applications classiques

**** Données
     
     Les données se trouvent dans le répertoire ~Data/stegano/~.

*** Déroulement
    Le TP consiste à décoder successivement 6 messages encodés par
    stéganographie dans les images, en utilisant les applications OTB.


*** Rapide intro aux OTB-Applications
    - Orfeo ToolBox est une *bibliothèque* offrant des fonctionnalités de télédétection
    - Souvent nécessaire de combiner plusieurs fonctions (filtres) OTB dans une
      chaîne de traitements
    - Besoin d'interface de plus haut niveau (paramètres, les données d'entrée et
      de sortie, les logs...)
    - Chaque application correspond à une fonctionnalité de "haut niveau"
     (segmentation, orthorectification, segmentation, calculatrice sur les bandes...)
    - Correspond à une classe C++ (/otb::Application/) $\rightarrow$  librairie
    - Mécanisme de plugin
    - Possibilité de développer et distribuer ces applications /maison/
*** Rapide intro aux OTB-Applications   
    - En ligne de commande $\rightarrow$ otbcli\textunderscore{}Orthorectification
    - Dans une interface graphique $\rightarrow$ otbgui\textunderscore{}Orthorectification
    - En Python:
#+begin_src python
import otbApplication 
orth=otb.Registry.CreateApplication("OrthoRectification") 
#+end_src
    - Intégrées dans QGIS $\rightarrow$ Menu /processing/
    - Intégrées dans Monteverdi
*** GUI
    #+begin_center
    #+ATTR_LaTeX: width=0.95\textwidth center  
    [[file:../../../Slides/OTB-General/images/app_parameters.png]]
    #+end_center
*** Paramétrage
    - Afficher l'aide de l'application d'OrthoRectification (bon exemple)
    - Notion de /groupe de paramètres/
    - Notion de /paramètre obligatoire/
    - Dépendance entre paramètres (dynamique)
    - Valeur par défaut
    - Type des images en sortie (par défaut flottant)
*** Autre Exemple: BandMath
    - Calculatrice raster
    - Utilise la librairie MuParser
    - Prend en entrée une liste d'images (paramètre /-il/)
    - Codage des expressions mathématiques:
      - imXbY:
        - X: numéro de l'image dans la liste (de 1 à N)
        - Y: numéro de la bande dans l'image X (de 1 à N)
      - [[http://muparser.beltoforion.de/mup_features.html][Liste des opérateurs mathématiques disponibles]]
    - Exemples:
      - -exp "(im1b4 - im1b1) / (im1b4 - im1b1))"
      - -exp "acos((123*im1b1+265*im1b2+652*im1b3) \\
               / (sqrt(123*123+265*265+652*652)\\
               *sqrt(im1b1*im1b1+im1b2*im1b2+im1b3*im1b3)))"
      - -exp "im1b1>0.5?255:0"
*** Liens utiles
    - [[https://www.orfeo-toolbox.org/CookBook/CookBookse1.html#x7-60001.1][Introduction aux OTB applications]]
    - [[https://www.orfeo-toolbox.org//Applications/][Documentation de référence des applications]]
    - [[https://www.orfeo-toolbox.org/CookBook/CookBookch3.html#x38-370003][Exemples utilisation des OTB applications]]
    - [[http://docs.qgis.org/2.8/en/docs/user_manual/processing/index.html][QGIS processing]]
    - Aide d'une application: /otbcli\textunderscore{}XXX -help/
** Le mécanisme des applications *Orfeo ToolBox*                      :guide:
*** Description                                                        :desc:
**** Résumé
     
     Au cours de cet exercice, nous allons apprendre à utiliser les
     applications de l'Orfeo ToolBox. Des images intégrants des
     messages codés par stéganographie vous sont proposées. A vous
     d'utiliser les applications de l'Orfeo ToolBox afin de révéler le
     message contenu dans les images.
     
     Toutes les images d'origine utilisées dans cet exercice sont des
     extraits d'images Pléiades.

**** Pré-requis
     
     - Logiciels installés (Monteverdi et Orfeo ToolBox)
     - Données téléchargées
     
**** Objectifs

     - Savoir rechercher une application dans la liste des
       applications disponibles
     - Savoir paramétrer une application
     - Savoir trouver la documentation d'une application
     - Savoir utiliser plusieurs applications classiques

*** Étapes                                                            :steps:

    Les données se trouvent dans le répertoire ~Data/stegano~.

    Pour chacun des messages, on observera d'abord l'image pour
    essayer de déceler le message, puis on cherchera à utiliser les
    applications suggérées pour révéler le message.

**** Message 1    

     Dans l'image ~image1.tif~, une phrase a été encodée dans une
     zone de forte réflectance, en utilisant une valeur de pixel qui
     n'est pas admissible pour Pléiades (rappel: les images Pléiades
     sont codées sur des entiers de 12 bits non signés).

     Utilisez l'application *BandMath* pour détecter ces valeurs
     aberrantes et ainsi révéler le message.

**** Message 2

     Dans l'image ~image2.tif~, une phrase à été encodée dans une
     zone homogène de faible luminance. Les pixels ainsi modifiés ne
     sont pas détectables à l'oeil nu, mais pourraient être révélés par
     l'application d'un gradient ou d'un détecteur de contours.

     Utilisez l'application *EdgeExtraction* pour révéler le message.

**** Message 3

     Dans l'image ~image3.tif~, une phrase a été encodée en
     modifiant légèrement les valeurs des pixels des bandes rouge et
     proche infra-rouge. Cette modification est invisible à l'oeil nu,
     mais peut être révélée en calculant l'indice de végétation NDVI.

     Utilisez l'application *RadiometricIndices* pour révéler le message.

     Alternativement, utilisez l'application *BandMath* pour calculer
     l'indice NDVI à l'aide de la formule suivante:
     
     \begin{center}
     $NDVI = \frac{NIR-RED}{NIR+RED}$
     \end{center}

     Pour rappel, pour l'imagerie Pléiades la bande rouge est la
     première bande, et la bande proche infra-rouge la dernière.

**** Message 4

     Dans l'image ~image4.tif~, un message a été dissimulé dans les
     2 bits de poids faible de l'image. Cette transformation est
     non détectable à l'oeil nu, mais pourrait être révélé en isolant la
     valeur de ces 2 bits.

     Utilisez l'application *BandMath* pour isoler les 2 bits de poids
     faible dans l'image (encodée sur 12 bits pour rappel), afin de
     faire apparaître le message.

     *Notes:* La fonction rint() permet d'arrondir à l'entier le plus
     proche dans une expression de l'application *BandMath*.

**** Message 5

     Dans l'image ~image5.tif~, un message a été dissimulé en
     modifiant légèrement et localement le bruit de l'image. Il
     pourrait être révélé par une transformation permettant d'isoler
     le bruit.

     Utiliser l'application *DimensionalityReduction* pour isoler le
     bruit de l'image et ainsi révéler le message.

     Éventuellement, imaginer d'autres procédés utilisant les
     applications pour mettre en évidence cette modification locale du
     bruit.

**** Message 6

     Dans l'image ~image6.tif~, un message a été dissimulé en
     utilisant localement un opérateur morphologique en niveaux de gris
     (ouverture de rayon 1). Il pourrait être révélé en utilisant la
     propriété d'idempotence de cette transformation. Pour rappel, une
     fonction $f$ est dite idempotente si:

     \begin{center}
     $f(f(x))=f(x)$
     \end{center}

     Utilisez les applications *GrayscaleMorphologicalOperation* et
     *BandMath* pour révéler le message en vous appuyant sur la
     propriété d'idempotence.

*** Pour aller plus loin                                            :further:

    Quels messages étaient détectables en analysant finement l'image
    avec Monteverdi? Quels messages ne l'étaient pas?

    Pouvez vous imaginer d'autres procédés pour incruster des messages
    indétectables dans les images? Une image (~image.tif~) et un
    message sous la forme d'une image binaire (~message.tif~) vous
    sont fournies dans le répertoire ~Data/stegano/diy~ pour vous exercer.

** Le mécanisme des applications *Orfeo ToolBox*                  :solutions:
*** Message 1
    
    Pour faire apparaître ce premier message, il suffit d'observer
    qu'une image Pléiades est codée sur 12 bits, qu'il ne devrait donc
    pas y avoir de valeurs de pixel supérieures à
    $2^{12}-1=4095$. Nous allons donc utiliser l'application
    *BandMath* pour seuiller les pixels au dessus de cette valeur :

    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image1.tif           \
                      -out decoded1.tif uint8  \
                      -exp "im1b1>4095?255:0" 
    #+END_EXAMPLE

    Le texte encodé apparaît alors en blanc sur fond noir.

*** Message 2
    
    Pour décoder ce deuxième message nous allons calculer un gradient
    en utilisant l'application *EdgeExtraction*:

    #+BEGIN_EXAMPLE
    $ otbcli_EdgeExtraction -in image2.tif    \
                            -filter gradient    \
                            -out decoded2.tif
    #+END_EXAMPLE

*** Message 3

    Pour décoder le troisième message, il suffit de calculer un indice
    de végétation de type NDVI à l'aide de l'application
    *RadiometricIndices*:

    #+BEGIN_EXAMPLE
    $ otbcli_RadiometricIndices -in image3.tif      \
                                -channels.red 1       \
                                -channels.nir 4       \
                                -list Vegetation:NDVI \
                                -out decoded3.tif
    #+END_EXAMPLE

    Alternativement, il est également possible de calculer le NDVI
    avec l'application *BandMath*:

    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image3.tif                    \
                      -out decoded3.tif                 \
                      -exp "(im1b4-im1b1)/(im1b4+im1b1)"
    #+END_EXAMPLE

*** Message 4
    
    Afin de faire apparaître le quatrième message, nous allons isoler
    les 2 bits de poids faible en utilisant l'application *BandMath*:

    #+BEGIN_EXAMPLE
    $ otbcli_BandMath -il image4.tif               \
                      -out decoded4.tif            \
                      -exp "im1b1-4*rint(im1b1/4)"
    #+END_EXAMPLE
    
    L'expression $4*rint(im1b1/4)$ ne contient aucun des 2 bits de
    poids faible, la différence avec l'image codée révèle donc le message.

*** Message 5

    Pour révéler le cinquième message, nous allons réaliser une
    analyse en composantes principales à l'aide de l'application
    *DimensionalityReduction* et en extraire la dernière bande à
    l'aide de l'application *ExtractROI*, où
    se concentre le bruit:

    #+BEGIN_EXAMPLE
    $ otbcli_DimensionalityReduction -in image5.tif  \
                                     -out pca6.tif   \
                                     -method pca
    $ otbcli_ExtractROI -in pca6.tif                 \
                        -out decoded6.tif            \
                        -cl Channel4
    #+END_EXAMPLE

*** Message 6

    Pour révéler le sixième message, nous allons nous appuyer sur la
    propriété d'idempotence. Si le message a été encodé à l'aide d'une
    transformation idempotente, alors $f(message)=message$, et par
    conséquent $f(message)-message=0$, tandis qu'ailleurs dans
    l'image, on observera $f(image)$.

    #+BEGIN_EXAMPLE
    $ otbcli_GrayScaleMorphologicalOperation -in image6.tif             \
                                             -out ouverture6.tif        \
                                             -structype.ball.xradius 1  \
                                             -structype.ball.yradius 1  \
                                             -filter opening            
    $ otbcli_BandMath -il image6.tif ouverture6.tif                     \
                      -out decoded6.tif                                 \
                      -exp "(im2b1-im1b1)"
    #+END_EXAMPLE
